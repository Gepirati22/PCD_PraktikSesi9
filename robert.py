# -*- coding: utf-8 -*-
"""Robert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17RkySMfbi0j1tEIAgFQAxRBNIYEV7tYp
"""

import imageio as img
import numpy as np
import matplotlib.pyplot as plt

image = img.imread("lena1.jpg", mode='F')

robertsX = np.array([
    [1, 0],
    [0, -1]
])
robertsY = np.array([
    [0, 1],
    [-1, 0]
])

def calculate_gradient_roberts(image, kernelX, kernelY):
    pad = kernelX.shape[0] - 1  # Roberts kernel is 2x2, so pad = 1
    imgPad = np.pad(image, pad_width=pad, mode='constant', constant_values=0)
    Gx = np.zeros_like(image, dtype=float)
    Gy = np.zeros_like(image, dtype=float)

    for y in range(pad, imgPad.shape[0] - pad):
        for x in range(pad, imgPad.shape[1] - pad):
            region = imgPad[y - pad:y + pad + 1, x - pad:x + pad + 1]
            Gx[y - pad, x - pad] = (region[:2, :2] * kernelX).sum()
            Gy[y - pad, x - pad] = (region[:2, :2] * kernelY).sum()

    Gx = (Gx / Gx.max()) * 255
    Gy = (Gy / Gy.max()) * 255
    G = np.sqrt(Gx ** 2 + Gy ** 2)
    G = (G / G.max()) * 255

    Gx = np.clip(Gx, 0, 255).astype(np.uint8)
    Gy = np.clip(Gy, 0, 255).astype(np.uint8)
    G = np.clip(G, 0, 255).astype(np.uint8)

    return Gx, Gy, G

Gx_roberts, Gy_roberts, G_roberts = calculate_gradient_roberts(image, robertsX, robertsY)


plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
plt.title("Original Image")
plt.imshow(image, cmap='gray')
plt.axis('off')

plt.subplot(2, 2, 2)
plt.title("Gradient X (Roberts)")
plt.imshow(Gx_roberts, cmap='gray')
plt.axis('off')

plt.subplot(2, 2, 3)
plt.title("Gradient Y (Roberts)")
plt.imshow(Gy_roberts, cmap='gray')
plt.axis('off')

plt.subplot(2, 2, 4)
plt.title("Roberts Edge Detection")
plt.imshow(G_roberts, cmap='gray')
plt.axis('off')

plt.show()